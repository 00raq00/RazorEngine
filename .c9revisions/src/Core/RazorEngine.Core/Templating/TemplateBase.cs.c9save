{"ts":1358155435097,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿namespace RazorEngine.Templating\r\n{\r\n    using System;\r\n    using System.Diagnostics.Contracts;\r\n    using System.IO;\r\n    using System.Text;\r\n\r\n    using Text;\r\n\r\n    /// <summary>\r\n    /// Provides a base implementation of a template.\r\n    /// </summary>\r\n    public abstract class TemplateBase : MarshalByRefObject, ITemplate\r\n    {\r\n        #region Fields\r\n        private ExecuteContext _context;\r\n        #endregion\r\n\r\n        #region Constructor\r\n        /// <summary>\r\n        /// Initialises a new instance of <see cref=\"TemplateBase\"/>.\r\n        /// </summary>\r\n        protected TemplateBase() { }\r\n        #endregion\r\n\r\n        #region Properties\r\n        /// <summary>\r\n        /// Gets or sets the layout template name.\r\n        /// </summary>\r\n        public string Layout { get; set; }\r\n\r\n        /// <summary>\r\n        /// Gets or sets the template service.\r\n        /// </summary>\r\n        public ITemplateService TemplateService { get; set; }\r\n\r\n        /// <summary>\r\n        /// Gets the viewbag that allows sharing state between layout and child templates.\r\n        /// </summary>\r\n        public dynamic ViewBag { get { return _context.ViewBag; } }\r\n\r\n        /// <summary>\r\n        /// Gets the current writer.\r\n        /// </summary>\r\n        public TextWriter CurrentWriter { get { return _context.CurrentWriter; } }\r\n        #endregion\r\n\r\n        #region Methods\r\n        /// <summary>\r\n        /// Defines a section that can written out to a layout.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the section.</param>\r\n        /// <param name=\"action\">The delegate used to write the section.</param>\r\n        public void DefineSection(string name, Action action)\r\n        {\r\n            _context.DefineSection(name, action);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Includes the template with the specified name.\r\n        /// </summary>\r\n        /// <param name=\"cacheName\">The name of the template type in cache.</param>\r\n        /// <param name=\"model\">The model or NULL if there is no model for the template.</param>\r\n        /// <returns>The template writer helper.</returns>\r\n        public virtual TemplateWriter Include(string cacheName, object model = null)\r\n        {\r\n            var instance = TemplateService.Resolve(cacheName, model);\r\n            if (instance == null)\r\n                throw new ArgumentException(\"No template could be resolved with name '\" + cacheName + \"'\");\r\n\r\n            return new TemplateWriter(tw => tw.Write(instance.Run(new ExecuteContext())));\r\n        }\r\n\r\n        /// <summary>\r\n        /// Determines if the section with the specified name has been defined.\r\n        /// </summary>\r\n        /// <param name=\"name\">The section name.</param>\r\n        /// <returns></returns>\r\n        public virtual bool IsSectionDefined(string name)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(name))\r\n                throw new ArgumentException(\"The name of the section to render must be specified.\");\r\n\r\n            return (_context.GetSectionDelegate(name) != null);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Executes the compiled template.\r\n        /// </summary>\r\n        public virtual void Execute() { }\r\n\r\n        /// <summary>\r\n        /// Returns the specified string as a raw string. This will ensure it is not encoded.\r\n        /// </summary>\r\n        /// <param name=\"rawString\">The raw string to write.</param>\r\n        /// <returns>An instance of <see cref=\"IEncodedString\"/>.</returns>\r\n        public IEncodedString Raw(string rawString)\r\n        {\r\n            return new RawString(rawString);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Resolves the layout template.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the layout template.</param>\r\n        /// <returns>An instance of <see cref=\"ITemplate\"/>.</returns>\r\n        protected virtual ITemplate ResolveLayout(string name)\r\n        {\r\n            return TemplateService.Resolve(name, null);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Runs the template and returns the result.\r\n        /// </summary>\r\n        /// <param name=\"context\">The current execution context.</param>\r\n        /// <returns>The merged result of the template.</returns>\r\n        string ITemplate.Run(ExecuteContext context)\r\n        {\r\n            _context = context;\r\n\r\n            var builder = new StringBuilder();\r\n            using (var writer = new StringWriter(builder)) \r\n            {\r\n                _context.CurrentWriter = writer;\r\n                Execute();\r\n                _context.CurrentWriter = null;\r\n            }\r\n\r\n            if (Layout != null)\r\n            {\r\n                // Get the layout template.\r\n                var layout = ResolveLayout(Layout);\r\n\r\n                // Push the current body instance onto the stack for later execution.\r\n                var body = new TemplateWriter(tw => tw.Write(builder.ToString()));\r\n                context.PushBody(body);\r\n\r\n                return layout.Run(context);\r\n            }\r\n\r\n            return builder.ToString();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Renders the section with the specified name.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the section.</param>\r\n        /// <param name=\"isRequired\">Flag to specify whether the section is required.</param>\r\n        /// <returns>The template writer helper.</returns>\r\n        public TemplateWriter RenderSection(string name, bool isRequired = true)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(name))\r\n                throw new ArgumentException(\"The name of the section to render must be specified.\");\r\n\r\n            var action = _context.GetSectionDelegate(name);\r\n            if (action == null && isRequired)\r\n                throw new ArgumentException(\"No section has been defined with name '\" + name + \"'\");\r\n\r\n            if (action == null) action = () => { };\r\n\r\n            return new TemplateWriter(tw => action());\r\n        }\r\n\r\n        /// <summary>\r\n        /// Renders the body of the template.\r\n        /// </summary>\r\n        /// <returns>The template writer helper.</returns>\r\n        public TemplateWriter RenderBody()\r\n        {\r\n            return _context.PopBody();\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes the specified object to the result.\r\n        /// </summary>\r\n        /// <param name=\"value\">The value to write.</param>\r\n        public virtual void Write(object value)\r\n        {\r\n            if (value == null) return;\r\n\r\n            var encodedString = value as IEncodedString;\r\n            if (encodedString != null)\r\n            {\r\n                _context.CurrentWriter.Write(encodedString);\r\n            }\r\n            else\r\n            {\r\n                encodedString = TemplateService.EncodedStringFactory.CreateEncodedString(value);\r\n                _context.CurrentWriter.Write(encodedString);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes the specified template helper result.\r\n        /// </summary>\r\n        /// <param name=\"helper\">The template writer helper.</param>\r\n        public virtual void Write(TemplateWriter helper)\r\n        {\r\n            if (helper == null)\r\n                return;\r\n\r\n            helper.WriteTo(_context.CurrentWriter);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes the specified string to the result.\r\n        /// </summary>\r\n        /// <param name=\"literal\">The literal to write.</param>\r\n        public virtual void WriteLiteral(string literal)\r\n        {\r\n            if (literal == null) return;\r\n            _context.CurrentWriter.Write(literal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes a string literal to the specified <see cref=\"TextWriter\"/>.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"literal\">The literal to be written.</param>\r\n        [Pure]\r\n        public static void WriteLiteralTo(TextWriter writer, string literal)\r\n        {\r\n            if (writer == null)\r\n                throw new ArgumentNullException(\"writer\");\r\n\r\n            if (literal == null) return;\r\n            writer.Write(literal);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes the specified object to the specified <see cref=\"TextWriter\"/>.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"value\">The value to be written.</param>\r\n        [Pure]\r\n        public static void WriteTo(TextWriter writer, object value)\r\n        {\r\n            if (writer == null)\r\n                throw new ArgumentNullException(\"writer\");\r\n\r\n            if (value == null) return;\r\n            writer.Write(value);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes the specfied template helper result to the specified writer.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"helper\">The template writer helper.</param>\r\n        [Pure]\r\n        public static void WriteTo(TextWriter writer, TemplateWriter helper)\r\n        {\r\n            helper.WriteTo(writer);\r\n        }\r\n        #endregion\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":9160}]],"length":9160}
{"contributors":[],"silentsave":false,"ts":1358155530920,"patch":[[{"diffs":[[-1,"﻿"],[0,"name"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"er);\r\n        }\r"],[1,"\n        \r\n        /// <summary>\r\n        /// Writes an attribute to the result.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the attribute.</param>\r\n        public virtual void WriteAttribute(string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            WriteAttributeTo(CurrentWriter, name, prefix, suffix, values);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes an attribute to the specified <see cref=\"TextWriter\"/>.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"name\">The name of the attribute to be written.</param>\r\n        public virtual void WriteAttributeTo(TextWriter writer, string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            bool first = true;\r\n            bool wroteSomething = false;\r\n            if (values.Length == 0)\r\n            {\r\n                // Explicitly empty attribute, so write the prefix and suffix\r\n                WritePositionTaggedLiteral(writer, prefix);\r\n                WritePositionTaggedLiteral(writer, suffix);\r\n            }\r\n            else\r\n            {\r\n                for (int i = 0; i < values.Length; i++)\r\n                {\r\n                    AttributeValue attrVal = values[i];\r\n                    PositionTagged<object> val = attrVal.Value;\r\n\r\n                    bool? boolVal = null;\r\n                    if (val.Value is bool)\r\n                    {\r\n                        boolVal = (bool)val.Value;\r\n                    }\r\n\r\n                    if (val.Value != null && (boolVal == null || boolVal.Value))\r\n                    {\r\n                        string valStr = val.Value as string;\r\n                        if (valStr == null)\r\n                        {\r\n                            valStr = val.Value.ToString();\r\n                        }\r\n                        if (boolVal != null)\r\n                        {\r\n                            Debug.Assert(boolVal.Value);\r\n                            valStr = name;\r\n                        }\r\n\r\n                        if (first)\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, prefix);\r\n                            first = false;\r\n                        }\r\n                        else\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, attrVal.Prefix);\r\n                        }\r\n\r\n                        if (attrVal.Literal)\r\n                        {\r\n                            WriteLiteralTo(writer, valStr);\r\n                        }\r\n                        else\r\n                        {\r\n                            WriteTo(writer, valStr); // Write value\r\n                        }\r\n                        wroteSomething = true;\r\n                    }\r\n                }\r\n                if (wroteSomething)\r\n                {\r\n                    WritePositionTaggedLiteral(writer, suffix);\r\n                }\r\n            }\r\n        }\r"],[0,"\n\r\n        /// <"]],"start1":7292,"start2":7292,"length1":32,"length2":3132},{"diffs":[[0,";\r\n        }\r\n\r\n"],[1,"        /// <summary>\r\n        /// Writes a <see cref=\"PositionTagged{string}\" /> literal to the result.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"literal\">The literal to be written.</param>\r\n        private void WritePositionTaggedLiteral(TextWriter writer, PositionTagged<string> value)\r\n        {\r\n            WriteLiteralTo(writer, value.Value);\r\n        }\r\n\r\n"],[0,"        /// <sum"]],"start1":11281,"start2":11281,"length1":32,"length2":458}]],"length":12685,"saved":false}
{"ts":1358155539664,"patch":[[{"diffs":[[0,"itten.</param>\r\n"],[1,"        [Pure]\r\n"],[0,"        private "]],"start1":11535,"start2":11535,"length1":32,"length2":48}]],"length":12701,"saved":false}
{"ts":1358155548959,"patch":[[{"diffs":[[0,"itten.</param>\r\n"],[1,"        [Pure]\r\n"],[0,"        public v"]],"start1":7974,"start2":7974,"length1":32,"length2":48}]],"length":12717,"saved":false}
