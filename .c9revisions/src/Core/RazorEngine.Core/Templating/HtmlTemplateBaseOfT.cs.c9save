{"ts":1358155439697,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿namespace RazorEngine.Templating\r\n{\r\n    using System.Diagnostics;\r\n    using System.IO;\r\n\r\n    /// <summary>\r\n    /// Provides a base implementation of an html template with a model.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The model type.</typeparam>\r\n    public class HtmlTemplateBase<T> : TemplateBase<T>\r\n    {\r\n        #region Methods\r\n        /// <summary>\r\n        /// Writes an attribute to the result.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the attribute.</param>\r\n        public virtual void WriteAttribute(string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            WriteAttributeTo(CurrentWriter, name, prefix, suffix, values);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes an attribute to the specified <see cref=\"TextWriter\"/>.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"name\">The name of the attribute to be written.</param>\r\n        public virtual void WriteAttributeTo(TextWriter writer, string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            bool first = true;\r\n            bool wroteSomething = false;\r\n            if (values.Length == 0)\r\n            {\r\n                // Explicitly empty attribute, so write the prefix and suffix\r\n                WritePositionTaggedLiteral(writer, prefix);\r\n                WritePositionTaggedLiteral(writer, suffix);\r\n            }\r\n            else\r\n            {\r\n                for (int i = 0; i < values.Length; i++)\r\n                {\r\n                    AttributeValue attrVal = values[i];\r\n                    PositionTagged<object> val = attrVal.Value;\r\n\r\n                    bool? boolVal = null;\r\n                    if (val.Value is bool)\r\n                    {\r\n                        boolVal = (bool)val.Value;\r\n                    }\r\n\r\n                    if (val.Value != null && (boolVal == null || boolVal.Value))\r\n                    {\r\n                        string valStr = val.Value as string;\r\n                        if (valStr == null)\r\n                        {\r\n                            valStr = val.Value.ToString();\r\n                        }\r\n                        if (boolVal != null)\r\n                        {\r\n                            Debug.Assert(boolVal.Value);\r\n                            valStr = name;\r\n                        }\r\n\r\n                        if (first)\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, prefix);\r\n                            first = false;\r\n                        }\r\n                        else\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, attrVal.Prefix);\r\n                        }\r\n\r\n                        if (attrVal.Literal)\r\n                        {\r\n                            WriteLiteralTo(writer, valStr);\r\n                        }\r\n                        else\r\n                        {\r\n                            WriteTo(writer, valStr); // Write value\r\n                        }\r\n                        wroteSomething = true;\r\n                    }\r\n                }\r\n                if (wroteSomething)\r\n                {\r\n                    WritePositionTaggedLiteral(writer, suffix);\r\n                }\r\n            }\r\n        }\r\n\r\n        private void WritePositionTaggedLiteral(TextWriter writer, PositionTagged<string> value)\r\n        {\r\n            WriteLiteralTo(writer, value.Value);\r\n        }\r\n        #endregion\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":3641}]],"length":3641}
{"contributors":[],"silentsave":false,"ts":1358155613675,"patch":[[{"diffs":[[-1,"﻿"],[0,"name"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"lating\r\n"],[1,""],[0,"{\r\n    u"]],"start1":26,"start2":26,"length1":16,"length2":16},{"diffs":[[0,"e<T>"],[-1,"\r\n    {\r\n        #region Methods\r\n        /// <summary>\r\n        /// Writes an attribute to the result.\r\n        /// </summary>\r\n        /// <param name=\"name\">The name of the attribute.</param>\r\n        public virtual void WriteAttribute(string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            WriteAttributeTo(CurrentWriter, name, prefix, suffix, values);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Writes an attribute to the specified <see cref=\"TextWriter\"/>.\r\n        /// </summary>\r\n        /// <param name=\"writer\">The writer.</param>\r\n        /// <param name=\"name\">The name of the attribute to be written.</param>\r\n        public virtual void WriteAttributeTo(TextWriter writer, string name, PositionTagged<string> prefix, PositionTagged<string> suffix, params AttributeValue[] values)\r\n        {\r\n            bool first = true;\r\n            bool wroteSomething = false;\r\n            if (values.Length == 0)\r\n            {\r\n                // Explicitly empty attribute, so write the prefix and suffix\r\n                WritePositionTaggedLiteral(writer, prefix);\r\n                WritePositionTaggedLiteral(writer, suffix);\r\n            }\r\n            else\r\n            {\r\n                for (int i = 0; i < values.Length; i++)\r\n                {\r\n                    AttributeValue attrVal = values[i];\r\n                    PositionTagged<object> val = attrVal.Value;\r\n\r\n                    bool? boolVal = null;\r\n                    if (val.Value is bool)\r\n                    {\r\n                        boolVal = (bool)val.Value;\r\n                    }\r\n\r\n                    if (val.Value != null && (boolVal == null || boolVal.Value))\r\n                    {\r\n                        string valStr = val.Value as string;\r\n                        if (valStr == null)\r\n                        {\r\n                            valStr = val.Value.ToString();\r\n                        }\r\n                        if (boolVal != null)\r\n                        {\r\n                            Debug.Assert(boolVal.Value);\r\n                            valStr = name;\r\n                        }\r\n\r\n                        if (first)\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, prefix);\r\n                            first = false;\r\n                        }\r\n                        else\r\n                        {\r\n                            WritePositionTaggedLiteral(writer, attrVal.Prefix);\r\n                        }\r\n\r\n                        if (attrVal.Literal)\r\n                        {\r\n                            WriteLiteralTo(writer, valStr);\r\n                        }\r\n                        else\r\n                        {\r\n                            WriteTo(writer, valStr); // Write value\r\n                        }\r\n                        wroteSomething = true;\r\n                    }\r\n                }\r\n                if (wroteSomething)\r\n                {\r\n                    WritePositionTaggedLiteral(writer, suffix);\r\n                }\r\n            }\r\n        }\r\n\r\n        private void WritePositionTaggedLiteral(TextWriter writer, PositionTagged<string> value)\r\n        {\r\n            WriteLiteralTo(writer, value.Value);\r\n        }\r\n        #endregion\r\n  "],[0," "],[1,"{"],[0," }\r\n"]],"start1":312,"start2":312,"length1":3327,"length2":10}]],"length":323,"saved":false}
{"ts":1358155699364,"patch":[[{"diffs":[[0,"/// </summary>\r\n"],[1,"    /// <remarks>\r\n    /// This type does not currently serve a purpose, and the WriteAttribute* API has been migrated to the TemplateBase type. This type is not deprecated, as it\r\n    /// may form the basis for a future template that supports MVC like @Html syntax.\r\n    /// <remarks>\r\n"],[0,"    /// <typepar"]],"start1":189,"start2":189,"length1":32,"length2":319}]],"length":610,"saved":false}
