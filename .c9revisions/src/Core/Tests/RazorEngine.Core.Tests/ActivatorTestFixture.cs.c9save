{"ts":1357548988416,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿namespace RazorEngine.Tests\r\n{\r\n    using System;\r\n    using System.IO;\r\n\r\n    using Microsoft.Practices.Unity;\r\n    using Moq;\r\n    using NUnit.Framework;\r\n\r\n    using Compilation;\r\n    using Configuration;\r\n    using Templating;\r\n    using TestTypes;\r\n    using TestTypes.Activation;\r\n    using Text;\r\n\r\n    /// <summary>\r\n    /// Defines a test fixture that provides tests for the <see cref=\"IActivator\"/> type.\r\n    /// </summary>\r\n    [TestFixture]\r\n    public class ActivatorTestFixture\r\n    {\r\n        #region Tests\r\n        /// <summary>\r\n        /// Tests that a custom activator can be used. In this test case, we're using Unity\r\n        /// to handle a instantiation of a custom activator.\r\n        /// </summary>\r\n        [Test]\r\n        public void TemplateService_CanSupportCustomActivator_WithUnity()\r\n        {\r\n            var container = new UnityContainer();\r\n            container.RegisterType(typeof(ITextFormatter), typeof(ReverseTextFormatter));\r\n\r\n            var config = new TemplateServiceConfiguration\r\n                             {\r\n                                 Activator = new UnityTemplateActivator(container),\r\n                                 BaseTemplateType = typeof(CustomTemplateBase<>)\r\n                             };\r\n\r\n            using (var service = new TemplateService(config))\r\n            {\r\n                const string template = \"<h1>Hello @Format(Model.Forename)</h1>\";\r\n                const string expected = \"<h1>Hello ttaM</h1>\";\r\n\r\n                var model = new Person { Forename = \"Matt\" };\r\n                string result = service.Parse(template, model);\r\n\r\n                Assert.That(result == expected, \"Result does not match expected: \" + result);\r\n            }\r\n        }\r\n        #endregion\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":1772}]],"length":1772}
